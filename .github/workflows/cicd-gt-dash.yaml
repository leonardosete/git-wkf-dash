name: CI/CD - Build e Deploy GT-Dash

on:
  push:
    branches: [develop]
  workflow_dispatch:

jobs:
  check-changes:
    name: 🔍 Verifica se build é necessário
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.changed }}
    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v4

      - name: 🧠 Verifica se Dockerfile ou src/ foram alterados
        id: check
        run: |
          echo "changed=false" >> $GITHUB_OUTPUT
          git fetch origin develop
          if git diff --name-only origin/develop HEAD | grep -E 'Dockerfile|^src/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: 🛠️ Build & Push Docker Image
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: 📦 Checkout do código
        uses: actions/checkout@v4

      - name: 🏷️ Metadados da imagem
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/sevenleo/github-dashboard
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest

      - name: 🔐 Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Build e Push da Imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  update-values-and-deploy:
    name: 🚀 Atualiza values.yaml e Deploy ArgoCD
    needs: [check-changes, build-and-push]
    runs-on: ubuntu-latest
    if: always()  # sempre roda, mesmo se o build foi pulado

    steps:
      - name: 🔁 Clona repositório autenticado com PAT
        env:
          GH_PUSH_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        run: |
          git clone https://x-access-token:${GH_PUSH_TOKEN}@github.com/${{ github.repository }} repo-auth
          cd repo-auth
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          IMAGE_TAG="${{ needs.build-and-push.outputs.image_tag || 'latest' }}"
          sed -i "s/tag: .*/tag: $IMAGE_TAG/" apps/gt-dash/values.yaml
          git add apps/gt-dash/values.yaml
          git commit -m "🚀 Atualiza imagem do gt-dash para tag $IMAGE_TAG" || echo "Nada para commitar"
          git pull --rebase origin develop
          git push origin HEAD:develop

      - name: 🔐 kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config

      - name: 🧩 Aplica o Application do ArgoCD
        run: |
          cd repo-auth
          kubectl apply -f argo-apps/gt-dash.yaml -n argocd

      - name: 🔁 Força sync no ArgoCD
        run: |
          cd repo-auth
          kubectl -n argocd patch application gt-dash \
            --type merge -p '{"spec":{"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'

